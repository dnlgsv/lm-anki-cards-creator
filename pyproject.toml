[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lm-anki-cards-creator"
version = "2.0.0"
description = "Professional-grade Anki flashcard generation using Language Models and Text-to-Speech"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    { name = "Daniil Gusev", email = "danilgusev9639@gmail.com" }
]
keywords = ["anki", "flashcards", "llm", "language-model", "tts", "education"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML and AI
    "llama-cpp-python>=0.3.7",
    "openai>=1.65.3",
    "langchain-core>=0.3.41",
    "langchain-openai>=0.3.7",
    "tiktoken>=0.9.0",
    
    # Audio processing
    "elevenlabs>=1.51.0",
    "gTTS>=2.5.4",
    
    # Anki deck creation
    "genanki>=0.13.1",
    
    # NLP utilities
    "nltk>=3.9.1",
    
    # Web interface
    "streamlit>=1.42.2",
    
    # Data processing
    "pandas>=2.2.3",
    "numpy>=2.2.3",
    
    # Configuration and environment
    "python-dotenv>=1.0.1",
    "pydantic>=2.10.6",
    
    # Utilities
    "requests>=2.32.3",
    "click>=8.1.8",
    "rich>=13.9.4",
    "tqdm>=4.67.1",
    
    # Caching
    "diskcache>=5.6.3",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=4.0.1",
    
    # Development tools
    "ipykernel>=6.29.5",
    "jupyter>=1.0.0",
]

gpu = [
    # GPU acceleration support
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
]

all = [
    "lm-anki-cards-creator[dev,gpu]"
]

[project.urls]
Homepage = "https://github.com/yourusername/lm-anki-cards-creator"
Repository = "https://github.com/yourusername/lm-anki-cards-creator"
Documentation = "https://github.com/yourusername/lm-anki-cards-creator#readme"
Issues = "https://github.com/yourusername/lm-anki-cards-creator/issues"

[project.scripts]
anki-creator = "src.main:main"
anki-web = "src.streamlit_app:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
# UV-specific configuration
dev-dependencies = [
    "pytest>=8.4.0",
    "pytest-cov>=6.0.0", 
    "pytest-mock>=3.14.0",
    "ruff>=0.8.9",
    "mypy>=1.14.1",
    "pre-commit>=4.0.1",
    "black>=24.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "B", "C4", "N", "D", "UP", "SIM", "TCH"]
ignore = [
    "E501",  # Line too long
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
strict = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
